#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple
import heapq

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with a small smooth probability (e.g., 0.01)
for word in set(sum(french, ())):
    if (word,) not in tm:
        # Assign a small smooth probability for unknown words
        tm[(word,)] = [models.phrase(word, -5.0)]  # -5.0 represents log(0.01)

sys.stderr.write("Decoding %s with enhanced A* search...\n" % (opts.input))

# A* search decode
for f in french:
    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, coverage")
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, 0)

    # Priority queue (min-heap) for A* search, using `f(n) = g(n) + h(n)`
    heap = [(initial_hypothesis.logprob, initial_hypothesis)]
    
    # Stacks to store the best hypothesis for each position
    stacks = [{} for _ in f] + [{}]
    stacks[0][lm.begin()] = initial_hypothesis

    def compute_heuristic(f_j):
        """Enhanced heuristic function based on translation model and language model."""
        max_prob = float('-inf')
        for e in tm.get((f_j,), []):
            trans_prob = e.logprob
            fert_prob = -0.5  # Assuming a fertility penalty for multiple alignments

            # Iterate over each word in the English phrase and calculate LM score
            lm_prob = 0.0
            lm_state = lm.begin()  # Start with the initial LM state
            for word in e.english.split():
                lm_state, word_logprob = lm.score(lm_state, word)
                lm_prob += word_logprob

            dist_prob = -0.5  # Distortion probability, can be refined using actual distortion models
            heuristic = trans_prob + fert_prob + lm_prob + dist_prob
            max_prob = max(max_prob, heuristic)
        return max_prob

    while heap:
        _, h = heapq.heappop(heap)

        # If we have translated the entire French sentence, stop search
        if h.coverage == len(f):
            winner = h
            break

        # Expand the hypothesis
        for i in range(len(f)):
            for j in range(i+1, len(f)+1):
                if f[i:j] in tm:
                    for phrase in tm[f[i:j]]:
                        logprob = h.logprob + phrase.logprob
                        lm_state = h.lm_state

                        # Update language model probability for each word in the phrase
                        for word in phrase.english.split():
                            (lm_state, word_logprob) = lm.score(lm_state, word)
                            logprob += word_logprob

                        # Enhanced heuristic function based on the current phrase
                        future_cost = compute_heuristic(f[j]) if j < len(f) else 0.0

                        # Add end of sentence probability if this is the final phrase
                        logprob += lm.end(lm_state) if j == len(f) else 0.0

                        # Create a new hypothesis and add it to the priority queue and stacks
                        new_hypothesis = hypothesis(logprob, lm_state, h, phrase, j)
                        f_n = logprob + future_cost
                        
                        if lm_state not in stacks[j] or stacks[j][lm_state].logprob < logprob:
                            stacks[j][lm_state] = new_hypothesis
                            heapq.heappush(heap, (f_n, new_hypothesis))

    # Extract the best English translation from the final hypothesis
    def extract_english(h):
        return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

    print(extract_english(winner).strip())

    # If verbose mode is enabled, print additional info about probabilities
    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)

        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
                         (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
