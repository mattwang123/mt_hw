#!/usr/bin/env python
import optparse
import sys
import models
import heapq
from collections import namedtuple, defaultdict

# Options and Input Parsing
optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=5, type="int", help="Limit on number of translations to consider per phrase (default=5)")
optparser.add_option("-s", "--stack-size", dest="s", default=10, type="int", help="Maximum stack size (default=10)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# Translate unknown words as-is with probability 1
for word in set(sum(french, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write(f"Decoding {opts.input}...\n")
unaligned_count = 0

# Heuristic Function for A* Search
def heuristic(french_sentence, coverage_set, position):
    # HTFLD(n) heuristic (combines translation, fertility, language, and distortion models)
    h_tfld = 1.0
    for j in range(len(french_sentence)):
        if j not in coverage_set:
            h_tfld *= max_translation_fertility_language_distortion(french_sentence[j], position)
    return h_tfld

def max_translation_fertility_language_distortion(word, pos):
    """Calculate max of translation, fertility, language, and distortion probabilities."""
    max_prob = 0.0
    for phrase in tm[(word,)]:
        translation_prob = phrase.logprob
        fertility_prob = 1.0  # placeholder for fertility probability
        language_prob = 1.0   # placeholder for language probability
        distortion_prob = 1.0 # placeholder for distortion probability
        prob = translation_prob * fertility_prob * language_prob * distortion_prob
        max_prob = max(max_prob, prob)
    return max_prob

# A* Search Implementation
for f in french:
    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, coverage, g")
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, frozenset(), 0.0)
    
    # Priority queue for A* search
    priority_queue = []
    heapq.heappush(priority_queue, (0.0, initial_hypothesis))  # (cost, hypothesis)

    stacks = [defaultdict(lambda: None) for _ in range(len(f) + 1)]
    stacks[0][lm.begin()] = initial_hypothesis

    while priority_queue:
        # Pop the hypothesis with the lowest cost
        total_cost, h = heapq.heappop(priority_queue)
        
        # If hypothesis covers the full sentence, it's a solution
        if len(h.coverage) == len(f):
            winner = h
            break
        
        # Expand the hypothesis by extending phrases
        for i in range(len(f)):
            for j in range(i + 1, len(f) + 1):
                if f[i:j] in tm:
                    for phrase in tm[f[i:j]]:
                        # Calculate the new hypothesis cost
                        logprob = h.logprob + phrase.logprob
                        lm_state = h.lm_state
                        for word in phrase.english.split():
                            (lm_state, word_logprob) = lm.score(lm_state, word)
                            logprob += word_logprob
                        logprob += lm.end(lm_state) if j == len(f) else 0.0
                        
                        # Update coverage and heuristic
                        new_coverage = h.coverage.union(set(range(i, j)))
                        g_value = h.g + logprob  # g(n) is the path cost so far
                        h_value = heuristic(f, new_coverage, j)  # h(n) is the heuristic
                        total_cost = g_value + h_value  # A* f(n) = g(n) + h(n)

                        # Create new hypothesis
                        new_hypothesis = hypothesis(logprob, lm_state, h, phrase, new_coverage, g_value)
                        
                        # Push the new hypothesis to the priority queue
                        heapq.heappush(priority_queue, (total_cost, new_hypothesis))

    # Ensure at least one hypothesis is generated
    if not winner:
        winner = hypothesis(0.0, lm.begin(), None, models.phrase(" ".join(f), 0.0), set(), 0.0)
        unaligned_count += 1

    def extract_english(h):
        return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

    print(extract_english(winner).strip())

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write(f"LM = {winner.logprob - tm_logprob}, TM = {tm_logprob}, Total = {winner.logprob}\n")

# Report unaligned sentences
if unaligned_count > 0:
    sys.stderr.write(f"ERROR: There were {unaligned_count} unaligned sentences!\n")
else:
    sys.stderr.write("All sentences aligned successfully!\n")
