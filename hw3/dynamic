#!/usr/bin/env python
import optparse
import sys
import models
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type=int, help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=5, type=int, help="Limit on number of translations to consider per phrase (default=5)")
optparser.add_option("-s", "--stack-size", dest="s", default=10, type=int, help="Maximum stack size (default=10)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french_sentences = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# Translate unknown words as-is with probability 1
for word in set(sum(french_sentences, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write(f"Decoding {opts.input}...\n")
unaligned_count = 0  # Track unaligned sentences

class Hypothesis:
    def __init__(self, logprob, lm_state, predecessor, end, phrase):
        self.logprob = logprob
        self.lm_state = lm_state
        self.predecessor = predecessor
        self.end = end  # End position in the source sentence
        self.phrase = phrase

for f in french_sentences:
    initial_hypothesis = Hypothesis(0.0, lm.begin(), None, 0, None)
    stacks = [{} for _ in range(len(f) + 1)]
    stacks[0][lm.begin()] = initial_hypothesis

    for i in range(len(f)):
        # Prune to top s hypotheses
        current_hyps = sorted(stacks[i].values(), key=lambda h: -h.logprob)[:opts.s]
        stacks[i] = {h.lm_state: h for h in current_hyps}

        for h in stacks[i].values():
            for j in range(i + 1, len(f) + 1):
                if f[i:j] in tm:
                    for phrase in tm[f[i:j]]:
                        logprob = h.logprob + phrase.logprob
                        lm_state = h.lm_state
                        for word in phrase.english.split():
                            (lm_state, word_logprob) = lm.score(lm_state, word)
                            logprob += word_logprob
                        new_hypothesis = Hypothesis(logprob, lm_state, h, j, phrase)

                        # Recombination
                        if lm_state not in stacks[j] or stacks[j][lm_state].logprob < logprob:
                            stacks[j][lm_state] = new_hypothesis

    # Find the best hypothesis covering the entire sentence
    if stacks[-1]:
        winner = max(stacks[-1].values(), key=lambda h: h.logprob)
    else:
        # If no valid hypotheses, create one that translates the entire sentence as-is
        winner = Hypothesis(float('-inf'), lm.begin(), None, len(f), models.phrase(" ".join(f), 0.0))
        unaligned_count += 1

    # Extract the translation
    def extract_english(h):
        return "" if h.predecessor is None else f"{extract_english(h.predecessor)}{h.phrase.english} "

    print(extract_english(winner).strip())

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write(f"LM = {winner.logprob - tm_logprob}, TM = {tm_logprob}, Total = {winner.logprob}\n")

# Report unaligned sentences
if unaligned_count > 0:
    sys.stderr.write(f"ERROR: There were {unaligned_count} unaligned sentences! Only sentences that align under the model can be graded!\n")
else:
    sys.stderr.write("All sentences aligned successfully!\n")
