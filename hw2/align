#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-i", "--iterations", dest="iterations", default=10, type="int", help="Number of EM iterations to run")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=100000000000, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))][:opts.num_sents]

#set translation probability for every French to English word pair to 1.0
translation_prob = defaultdict(lambda: defaultdict(lambda: 1.0))

french_word = set()
english_word = set()

#store unique word from bitext
for (f,e) in bitext:
  french_word.update(f)
  english_word.update(e)

#assume each English word is equally likely to translate to the French word
for f in french_word:
    for e in english_word:
        translation_prob[f][e] = 1.0 / len(english_word)

#EM algorithm
for iteration in range(opts.iterations):
    sys.stderr.write(f"Starting EM iteration {iteration + 1}...\n")
    
    count_fe = defaultdict(float)
    total_e = defaultdict(float)
    
    #calculate expected counts for each sentence pair
    for (f_sentence, e_sentence) in bitext:
        #normalization factor for each French word
        for f_i in f_sentence:
            normalization_factor = 0.0
            for e_j in e_sentence:
                normalization_factor += translation_prob[f_i][e_j]

            #update counts for each alignment
            for e_j in e_sentence:
                prob = translation_prob[f_i][e_j] / normalization_factor
                count_fe[(f_i, e_j)] += prob
                total_e[e_j] += prob

    #update translation probabilities based on counts
    for (f_i, e_j), count in count_fe.items():
        translation_prob[f_i][e_j] = count / total_e[e_j]

for (f_sentence, e_sentence) in bitext:
    for i, f_i in enumerate(f_sentence):
        best_j = max(range(len(e_sentence)), key=lambda j: translation_prob[f_i][e_sentence[j]])
        sys.stdout.write(f"{i}-{best_j} ")
    sys.stdout.write("\n")