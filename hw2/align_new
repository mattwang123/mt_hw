#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
from math import isclose

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=100000000000, type="int", help="Number of sentences to use for training and alignment")
optparser.add_option("-i", "--iterations", dest="iterations", default=5, type="int", help="Number of iterations for EM algorithm")
(opts, _) = optparser.parse_args()

f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training IBM Model 1...\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))][:opts.num_sents]

# Initialize t(e|f) uniformly
t = defaultdict(lambda: 1.0)

# Training loop for EM algorithm
for iteration in range(opts.iterations):
    sys.stderr.write(f"Iteration {iteration + 1}...\n")
    
    # Initialize count(e|f) and total(f) to 0
    count = defaultdict(float)
    total = defaultdict(float)
    
    # E-step: Expectation
    for (f, e) in bitext:
        # Compute normalization (s-total) for each word e in English sentence
        s_total = defaultdict(float)
        for e_j in e:
            for f_i in f:
                s_total[e_j] += t[(e_j, f_i)]
        
        # Collect counts
        for e_j in e:
            for f_i in f:
                # Fractional count based on current probability t(e|f)
                count[(e_j, f_i)] += t[(e_j, f_i)] / s_total[e_j]
                total[f_i] += t[(e_j, f_i)] / s_total[e_j]
    
    # M-step: Maximization (Recompute probabilities)
    for (e_j, f_i), c in count.items():
        t[(e_j, f_i)] = c / total[f_i]

# Output alignments based on t(e|f)
for (f, e) in bitext:
    for i, f_i in enumerate(f):
        best_prob = 0
        best_j = -1
        for j, e_j in enumerate(e):
            if t[(e_j, f_i)] > best_prob:
                best_prob = t[(e_j, f_i)]
                best_j = j
        if best_j != -1:
            sys.stdout.write(f"{i}-{best_j} ")
    sys.stdout.write("\n")
